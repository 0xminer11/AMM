pragma solidity ^0.5.16;
import "./libAmm.sol";
import "./factory.sol";
import "./pair.sol";
import "./libraryamm.sol";
contract router{

using SafeMath for uint;

address public  Factory;
address public WETH;

constructor(address _factory) public {
    Factory = _factory;
    // WETH = _WETH;
}
function pairFor(address factory, address tokenA, address tokenB) public pure returns (address pair) {
        (address token0, address token1) = (tokenA, tokenB);
        pair = address(uint(keccak256(abi.encodePacked(
                hex'ff',
                factory,
                keccak256(abi.encodePacked(token0, token1)),
                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash
            ))));
    }

function _addLiquidity(address tokenA,address tokenB,uint amountADesired,uint amountBDesired,uint amountAMin,uint amountBMin) internal returns(uint amountA,uint amountB){
    if(factory(Factory).getPair(tokenA,tokenB) == address(0)){
        factory(Factory).creatingpair(tokenA,tokenB);
    }

    (uint reserveA,uint reserveB,) = pair(Factory).getReserves();
    if(reserveA ==0 && reserveB ==0){
        (amountA,amountB) =(amountADesired,amountBDesired);
    }else{
        (amountA,amountB) =(amountADesired-reserveA,amountBDesired-reserveB);
    }


    //  else {
    //     uint amountBDesired =  
    // }
    return(amountA,amountB);


}
event process(bool successA,bool suceessB,address pairadd);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity) {
        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
        address pairadd = pairFor(Factory, tokenA, tokenB);
        // TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
        (bool successA, )=tokenA.call(abi.encodeWithSelector(0x23b872dd, msg.sender, pairadd, amountA));
        (bool suceessB, )=tokenB.call(abi.encodeWithSelector(0x23b872dd, msg.sender, pairadd, amountB));
        // TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
        liquidity = pair(pairadd).mint(to);
        emit process(successA,suceessB,pairadd);
    return(amountA,amountB,liquidity);
    }

    function getLiquidity(address pairadd,address to) public returns(uint){
    return(pair(pairadd).mint(to));
    }

    function gettoken(address pairadd) view public returns (address ,address){
        (address token0,address token1)= pair(pairadd).gettokens();
        return(token0,token1);
    }


}